==============================================================================================================================

## geom_histogram(binwidth = , color = , fill = ) + ggplot(aes(fill = factor_variable)) # 1D continous

## geom_freqpoly() # 1D

## geom_density(stat = "identity") + ggplot(aes(color = factor_variable)) # 1D

==============================================================================================================================

## geom_bar(position = , color = ) + ggplot(aes(x = , fill = factor)) # 1D category
## geom_bar(stat = "identity") + ggplot(aes(x = , y = )) # 2D category vs num
## stat_summary(fun.y=sum, geom="bar", position="stack" or "dodge" or "fill")  	

==============================================================================================================================

## geom_point(alpha = 0.5) + ggplot(aes(fill = factor_variable)) # 2D num vs num

==============================================================================================================================

## geom_boxplot(aes(color = factor_variable), alpha = 0.1) # 2D factor vs num

==============================================================================================================================

## geom_tile() + ggplot(aes(x = , y = , fill = numeric.variable)) # 2D factor vs factor. Use dplyr group_by(fac1,fac2) and n().

==============================================================================================================================

## geom_line(stat = "summary", fun.y = function, fun.args = list(probs = 0.9), linetype = 1, aes(color = factor_variable))

==============================================================================================================================

## geom_segment(aes(x = , xend = , y = , yend = ), color = "#ffffff") # to draw a line

==============================================================================================================================

## facet_wrap(~categorical_variable)

## facet_grid(vertical_categorical_variable~horizontal_categorical_variable)

==============================================================================================================================

## coord_cartesian(xlim = c(), ylim = c()) # doesn't remove data, only zooms-in or zooms=out the graph.

## coord_trans(x = log, y = sqrt, limx = c(), limy = c()) # Used to transform the coordinate axis.

## coord_flip()

## coord_polar() # can be used with bar plot to create pie charts.

## coord_map()

==============================================================================================================================

## scale_x_continuous(breaks = seq(), limits = c(), labels = c())

## scale_color_gradient(low = "green", high = "red")

## scale_size_area()

## scale_color_brewer()

## scale_fill_brewer()

==============================================================================================================================

## themes

		library(ggthemes)

		theme_grey()
		theme_bw()
		theme_excel() + scale_fill_economist()
		theme_few() + scale_fill_few()
		theme_solarized() + scale_fill_solarized()
		theme_stata() + scale_fill_stata()
		theme_tufte() + scale_fill_tableau()
		theme_gdocs() + scale_fill_gdocs()
		theme_wsj() + scale_fill_wsj(palette = "black_green")

## scale_fill/color_manual/continuous/discrete(guide = guide_legend("legend.title"),
		labels = c("legend.names"), values = c("legend.colors"))

## theme(axis.line, axis.text.x = element_text(face="bold", color="#993333", size=14, angle = 45, hjust = 1), 
		axis.ticks, axis.title.x, legend.position = "none")

## geom_text(aes(label = var), vjust = +/- 1) # text on top of graphs.

## annotate("text", label = "custom.text",x = x.postition, y = y.position, size = , colour = "text.color")

==============================================================================================================================

## labels
		
		library(ggrepel)
		geom_text_repel(aes(label = variable), size = 3)	
		xlab("x axis label name")
		ylab("y axis label name")
		ggtitle("graph title")
		labs(title = "title", x = "x label", y = "y label")
		
==============================================================================================================================

## gridExtra
	
		library(gridExtra)
		p1 <- ggplot()
		p2 <- ggplot()
		grid.arrange(p1,p2, ncol/nrow = )

==============================================================================================================================

## Text-Analysis

		library(tm)
		library(SnowballC)
		library(wordcloud)
		library(RColorBrewer)

	# cleaning data

		bag <- Corpus(VectorSource(data_frame$textVariable))

		bag <- tm_map(bag, tolower)
		
		bag <- tm_map(bag, PlainTextDocument)

		bag <- tm_map(bag, removePunctuation)

		bag <- tm_map(bag, removeWords, c("your custom words", stopwords("english")))

		bag <- tm_map(bag, stripWhitespace)

		bag <- tm_map(bag, stemDocument)

	# converting to data frame

		frequencies <- DocumentTermMatrix(bag)

		findFreqTerms(frequencies, lowfreq = 20) # to words that appear atleast 20 times

		sparseWords <- removeSparseTerms(frequencies, 0.995) # words that appear in 99.5 percent tweets
		
		sparseWords <- as.data.frame(as.matrix(sparseWords)) # converting the matrix of sparse words to data frame

		colnames(sparseWords) <- make.names(colnames(sparseWords))

	# wordcloud

		bag <- TermDocumentMatrix(bag)
		bag <- as.matrix(bag)
		bag <- sort(rowSums(bag), decreasing = T)
		bag.df <- data.frame(word = names(bag), freq = bag)
		
		set.seed(154)
				
		wordcloud(words = bag.df$word, freq = bag.df$freq, min.freq = 30,
	    			max.words=1500, random.order=FALSE, rot.per=0.35, 
        			colors=brewer.pal(8, "Dark2"), scale = c(5,0.5))

==============================================================================================================================

## Maps
	
		library(ggmap)

		usa <- ggmap(get_googlemap(center=as.numeric(geocode("usa")), scale=2, zoom=13), extent="normal")
		usa <- get_map(location="united states", zoom = 4, maptype = "terrain",source="google",color="color")
		usa <- get_map(location = c(left, bottom, right, top), source = "osm")
		
		ggmap(usa) + geom_point(data = data_frame, aes(x = Longitude, y = Latitude))
		
		
		library(maps)
		
		usa <- map_data("state")
		data_frame <- merge(usa, data_frame, by=" ")
		
		ggplot(data_frame, aes(x = long, y = lat, group = group))

		
		library(leaflet)
		map <- leaflet() %>%
				addTiles() %>%  # Add default OpenStreetMap map tiles
				addMarkers(lng = , lat = , popup = "popup.text")
		
		print(map)
		
==============================================================================================================================

## String

		library(stringr)

		lolower(character.variable)
		toupper(character.variable)
		strsplit(character.variable, ",") # split at ","
		str_extract(variable, pattern) # pattern <- "[a-zA-Z]*"
		gsub("#","%",character.variable) # substitute # with % at all instances. use sub() to replace only the first instance.
		grepl("substring",character.variable ) # return logical vector whether the substring appears or not.
		substr("Amandeep",1,4) # return Aman
		str_length() or nchar()
		str_trim()

==============================================================================================================================

## Data Table

		datatable(data_frame)

==============================================================================================================================





