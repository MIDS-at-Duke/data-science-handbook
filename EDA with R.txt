==============================================================================================================================

## geom_histogram(binwidth = , color = , fill = ) + ggplot(aes(fill = factor_variable)) # 1D

==============================================================================================================================

## geom_density(stat = "identity") + ggplot(aes(color = factor_variable)) # 1D

==============================================================================================================================

## geom_point(alpha = 0.5) + ggplot(aes(fill = factor_variable)) # 2D num vs num

==============================================================================================================================

## geom_boxplot(aes(color = factor_variable), alpha = 0.1) # factor vs num

==============================================================================================================================

## geom_line(stat = "summary", fun.y = function, fun.args = list(probs = 0.9), linetype = 1, aes(color = factor_variable))

==============================================================================================================================

## geom_segment(aes(x = , xend = , y = , yend = ), color = "#ffffff") # to draw a line

==============================================================================================================================

## ggplot(data = ,aes(x = , fill = factor)) + geom_bar() # 1D category
## ggplot(data = , aes(x = , y = )) + geom(stat = "identity") # 2D category vs num
## stat_summary(fun.y=sum, geom="bar", position="stack" or "dodge" or "fill")    	

==============================================================================================================================

## scale_x_continuous( breaks = seq(), limits = c() )

==============================================================================================================================

## coord_cartesian(xlim = (), ylim = c()) # doesn't remove data, only zooms-in or zooms=out the graph.
	
==============================================================================================================================

## coord_trans(x = log, y = sqrt, limx = c(), limy = c()) # Used to transform the coordinate axis.

==============================================================================================================================

## facet_wrap(~categorical_variable)

==============================================================================================================================

## facet_grid(vertical_categorical_variable~horizontal_categorical_variable)

==============================================================================================================================

## labels
		
		library(ggrepel)
		geom_text_repel(aes(label = variable), size = 3)	
		xlab("x axis label name")
		ylab("y axis label name")
		ggtitle("graph title")
		labs(title = "title", x = "x label", y = "y label")
		ggplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # to tilt x axis label
		ggplot() + geom_text(aes(label = var), vjust = +/- 1) # + pushes downward
		

==============================================================================================================================

## gridExtra
	
		library(gridExtra)
		p1 <- ggplot()
		p2 <- ggplot()
		grid.arrange(p1,p2, ncol/nrow = )

==============================================================================================================================

## Text-Analysis

		library(tm)
		library(SnowballC)
		library(wordcloud)

	# cleaning data

		bag <- Corpus(VectorSource(data_frame$textVariable))

		bag <- tm_map(bag, tolower)
		
		bag <- tm_map(bag, PlainTextDocument)

		bag <- tm_map(bag, removePunctuation)

		bag <- tm_map(bag, removeWords, c("your custom words", stopwords("english")))

		bag <- tm_map(bag, stripWhitespace)

		bag <- tm_map(bag, stemDocument)

	# converting to data frame

		frequencies <- DocumentTermMatrix(bag)

		findFreqTerms(frequencies, lowfreq = 20) # to words that appear atleast 20 times

		sparseWords <- removeSparseTerms(frequencies, 0.995) # words that appear in 99.5 percent tweets
		
		sparseWords <- as.data.frame(as.matrix(sparseWords)) # converting the matrix of sparse words to data frame

		colnames(sparseWords) <- make.names(colnames(sparseWords))

	# wordcloud

		bag <- TermDocumentMatrix(bag)
		bag <- as.matrix(bag)
		bag <- sort(rowSums(bag), decreasing = T)
		bag.df <- data.frame(word = names(bag), freq = bag)
		
		set.seed(154)
				
		wordcloud(words = bag.df$word, freq = bag.df$freq, min.freq = 10,
	    			max.words=1500, random.order=FALSE, rot.per=0.65, 
        			colors=brewer.pal(8, "Dark2"), scale(5,0.5))

==============================================================================================================================

## Maps
	
		library(ggmap)

		usa <- ggmap(get_googlemap(center=as.numeric(geocode("usa")), scale=2, zoom=13), extent="normal")
		usa <- get_map(location="united states", zoom = 4, maptype = "terrain",source="google",color="color")
		usa <- get_map(location = c(left, bottom, right, top), source = "osm")
		
		ggmap(usa) + geom_point(data = data_frame, aes(x = Longitude, y = Latitude))
		
==============================================================================================================================

## String

		library(stringr)
		str_extract(variable, pattern) # pattern <- "[a-zA-Z]*"

==============================================================================================================================



